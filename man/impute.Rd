% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impute.R
\name{impute}
\alias{impute}
\alias{impute.random}
\alias{impute.condmean}
\title{Create imputed datasets}
\usage{
impute(draws, references, update_strategy = NULL, strategies = getStrategies())

\method{impute}{random}(draws, references, update_strategy = NULL, strategies = getStrategies())

\method{impute}{condmean}(draws, references, update_strategy = NULL, strategies = getStrategies())
}
\arguments{
\item{draws}{A \code{draws} object created by \code{\link[=draws]{draws()}}.}

\item{references}{a named vector. Identifies the references to be used when generating
the imputed values. Should be of the form \code{c("Group1" = "Reference1", "Group2" = "Reference2")}.}

\item{update_strategy}{an optional dataframe. Updates the imputation method that was
originally set via the \code{data_ice} option in \code{\link[=draws]{draws()}}. See the details section for more
information.}

\item{strategies}{a named list of functions. Defines the imputation functions to be used.
The names of the list should mirror the values specified in \code{strategy} column of \code{data_ice}.
Default = \code{getStrategies()}. See \code{\link[=getStrategies]{getStrategies()}} for more details.}
}
\description{
\code{impute()} creates imputed datasets based upon the data and options specified in
the call to \code{\link[=draws]{draws()}}. One imputed dataset is created per each "sample" created by
\code{\link[=draws]{draws()}}.
}
\details{
\code{impute()} works by taking the model parameter estimates, as generated by \code{\link[=draws]{draws()}}, and using
them to calculate the conditional distribution for the outcome for each subject separately.
These distributions are then augmented based upon the; intercurrent event (ICE) data,
the chosen imputation strategy, and the chosen reference group. Imputed values are then drawn
from the augmented imputation distribution with 1 dataset being generated per set of parameter
estimates provided by \code{\link[=draws]{draws()}}.

The exact manor in how missing values are imputed from this augmented distribution depends
on the method object that was provided to \code{\link[=draws]{draws()}}, in particular:
\itemize{
\item Bayes & Approximate Bayes: each imputed dataset consists of 1 row per subject & visit
from the original dataset with missing values imputed by taking a single random sample
from the augmented outcome distribution.
\item Conditional Mean: each imputed dataset consists of 1 row per subject & visit from the
bootstrapped or Jackknife dataset that was used to generate the corresponding parameter
estimates in \code{\link[=draws]{draws()}}. Missing values are imputed by using the mean of the augmented
outcome distribution.
}

The \code{update_strategy} argument can be used to update the imputation strategy that was
originally set via
the \code{data_ice} option in \code{\link[=draws]{draws()}}. The \code{update_strategy} dataframe must contain two columns,
one for the subject ID and another for the imputation strategy, whose names are the same as
those defined in \code{vars} argument as specified in the call to \code{\link[=draws]{draws()}}. Please note that this
argument only allows you to update the imputation strategy, that is you cannot update the ICE
visit.
If you do need to change the ICE visit you will need to re-run \code{\link[=draws]{draws()}}. A key limitation
of this functionality is
that you can only switch between a MAR and a non-MAR strategy (or vice versa) if that subject
has no observed post ICE data. As an example, if a subject had their ICE on "Visit 2"
but has observed/known values for "Visit 3" then the function will throw an error
if you try to switch them from MAR to a non-MAR strategy.
}
\examples{
\dontrun{

impute(
    draws = drawobj,
    references = c("Trt" = "Placebo", "Placebo" = "Placebo")
)

new_strategy <- data.frame(
  subjid = c("Pt1", "Pt2"),
  strategy = c("MAR", "JR")
)

impute(
    draws = drawobj,
    references = c("Trt" = "Placebo", "Placebo" = "Placebo"),
    update_strategy = new_strategy
)
}

}
